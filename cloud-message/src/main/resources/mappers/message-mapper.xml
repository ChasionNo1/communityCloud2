<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chasion.dao.MessageMapper">
    <sql id="selectFields">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>
    <sql id="insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>
<!--    List<Message> getConversations(int userId, int offset, int limit);
        分组查询，选择出创建时间最晚的一个
-->
    <select id="getConversations" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where id in (
            select max(id) from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        )
        order by id desc
        limit #{offset}, #{limit}

    </select>

<!--    int getConversationCount(int userId);-->
    <select id="getConversationCount" resultType="int">
       select count(m.maxid) from (
            select max(id) as maxid from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        ) as m
    </select>

<!--    List<Message> getLetters(String conversationId, int offset, int limit);-->
    <select id="getLetters" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where conversation_id = #{conversationId}
        and status != 2
        and from_id != 1
        order by id desc
        limit #{offset}, #{limit}
    </select>

<!--    int getLetterCount(String conversationId);-->
    <select id="getLetterCount" resultType="int">
        select count(id)
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
    </select>

<!--    int getUnreadLetterCount(int userId, String conversationId);-->
    <select id="getUnreadLetterCount" resultType="int">
        select count(id)
        from message
        where status = 0
        and from_id != 1
        and to_id = #{userId}
        <if test="conversationId != null">
            and conversation_id = #{conversationId}
        </if>
    </select>
<!--    int insertMessage(Message message);-->
    <insert id="insertMessage" parameterType="Message" keyProperty="id" useGeneratedKeys="true">
        insert into message (<include refid="insertFields"></include>)
        values (#{fromId},#{toId},#{conversationId}, #{content},#{status},#{createTime})
    </insert>

<!--    int updateStatus(List<Integer> ids, int status);-->
    <update id="updateStatus">
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

<!--    Message getLatestNotice(@Param("userId") int userId, @Param("topic") String topic);-->
    <select id="getLatestNotice" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where id in (
            select max(id) from message
                where status != 2
                and from_id = 1
                and conversation_id = #{topic}
                and to_id = #{userId}
        )

    </select>

<!--    int  getNoticeCount(@Param("userId") int userId, @Param("topic") String topic);-->
    <select id="getNoticeCount" resultType="int">
        select count(*)
        from message
        where status !=2
        and from_id = 1
        and conversation_id = #{topic}
        and to_id = #{userId}
    </select>

<!--    int getUnreadNoticeCount(@Param("userId") int userId, @Param("topic") String topic);-->
    <select id="getUnreadNoticeCount" resultType="int">
        select count(*)
        from message
        where status = 0
        and from_id = 1
        and to_id = #{userId}
        <if test="topic!=null">
            and conversation_id = #{topic}
        </if>

    </select>
<!--    List<Message> getNotices(@Param("userId") int userId, @Param("topic") String topic, @Param("offset") int offset, @Param("limit") int limit);-->
    <select id="getNotices" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where from_id = 1
        and status != 2
        and to_id = #{userId}
        and conversation_id = #{topic}
        order by create_time desc
        limit #{offset}, #{limit}
    </select>
</mapper>

